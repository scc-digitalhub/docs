{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Platform Administration Overview","text":"<p>When deploying in a production environment, the platform setup requires additional steps for its secure and efficient use. In this  section we take into account aspects that are required for the platform setup. </p> <ul> <li>Authentication and Access Control</li> <li>Platform Configuration</li> </ul>"},{"location":"authentication/","title":"Platform Authentication and Access Control","text":"<p>The DigitalHub Platform supports authentication with an external provider.</p> <p>It is mandatory to set custom values for the platform, so Helm knowledge is required.</p> <p>This section will show how to set an authentication for the following:</p> <ul> <li>Coder</li> <li>Core</li> <li>Dashboard</li> <li>Kubernetes Resource Manager</li> <li>Kubeflow</li> <li>Minio</li> </ul>"},{"location":"configuration/","title":"Platform Configuration","text":"<p>The DigitalHub Platform provides configuration options in the DigitalHub values.yaml file.</p> <p>The safest way to set up your custom values is to use a values file in which you will set up the options you are interested in.</p> <p>Thanks to the Helm hereditary properties, the platform values will change taking the values of your custom file, preserving the integrity of the originals and allowing you to use a shorter set of customized values.</p> <p>You can use a custom set of values from a file like the example below, in which we install digitalhub with custom values: <pre><code>helm upgrade -n &lt;YOUR_NAMESPACE&gt; &lt;YOUR_RELEASE&gt; digitalhub/digitalhub --install --create-namespace --timeout 45m0s --values &lt;YOUR_VALUES_FILE_PATH&gt;\n</code></pre> In this example, <code>--set global.registry.url=\"MINIKUBE_IP_ADDRESS\"</code> and <code>--set global.externalHostAddress=\"MINIKUBE_IP_ADDRESS\"</code> are not specified in the installation command, but they can be specified in your values file:</p> <pre><code>global:\n  registry:\n    url: \"YOUR_ADDRESS\"\n  externalHostAddress: &amp;globalExternalUrl \"YOUR_ADDRESS\"\n</code></pre>"},{"location":"ingress/","title":"Ingress configuration","text":"<p>The services of the platform can be exposed with Ingress by editing your values file.</p> <p>For every exposable component, you will find a value field for the ingress, set by default to enabled: false.</p> <p>After setting enabled to true to activate the Ingress creation, check the component's values.yaml file to see how you should structure your custom values file and set all the neeeded Ingress values.</p> <p>The example below is for the Core Ingress:</p> <pre><code>ingress:\n  enabled: true\n  className: \"youringressclass\"\n  hosts:\n    - host: your.host\n      paths: \n        - pathType: ImplementationSpecific\n          path: /\n  tls:\n  - secretName: yourTlsSecret\n</code></pre>"},{"location":"installation/","title":"Installation on cluster","text":""},{"location":"installation/#prerequisites","title":"Prerequisites","text":"<ul> <li>Helm</li> <li>Kubectl</li> <li>A configured image registry</li> <li>A configured DNS</li> <li>Domains and Ingress Controller for service exposition</li> <li>A configured OAuth provider to enable authentication</li> </ul>"},{"location":"installation/#installation","title":"Installation","text":"<p>Once you have set your custom values.yaml file, DigitalHub can be installed as follows:</p> <p>1) Add Digitalhub repository: <pre><code>helm repo add digitalhub https://scc-digitalhub.github.io/digitalhub/\n</code></pre></p> <p>2) Install DigitalHub with Helm and your custom values.</p> <pre><code>helm upgrade digitalhub digitalhub/digitalhub -n digitalhub --install --create-namespace --values PATH_TO_YOUR_VALUES_FILE --timeout 45m0s\n</code></pre> <p>5) Wait until all pods are in Running or Completed state <pre><code>kubectl --namespace digitalhub get pods\n</code></pre></p> <p>Once installed, you should see the references (URLs) for the different tools of the platform, similar to the example below: <pre><code>##########################################################\n#   _____   _       _           _ _     _       _        #\n#  (____ \\ (_)     (_)_        | | |   | |     | |       #\n#   _   \\ \\ _  ____ _| |_  ____| | |__ | |_   _| | _     #\n#  | |   | | |/ _  | |  _)/ _  | |  __)| | | | | || \\    #\n#  | |__/ /| ( ( | | | |_( ( | | | |   | | |_| | |_) )   #\n#  |_____/ |_|\\_|| |_|\\___)_||_|_|_|   |_|\\____|____/    #\n#            (_____|                                     #\n#                                                        #\n##########################################################\n\nDigitalhub has been installed. Check its status by running:\n  kubectl --namespace digitalhub get pods\n\nDigitalhub componet URLs:\n  - Dashboard: http://192.168.76.2:30110\n  - Jupyter: http://192.168.76.2:30040 (Create jupyter workspace from template in the coder dashboard before use)\n  - Dremio: http://192.168.76.2:30120 (Create dremio workspace from template in the coder dashboard before use)\n  - Sqlpad: http://192.168.76.2:30140 (Create sqlpad workspace from template in the coder dashboard before use)\n  - Grafana: http://192.168.76.2:30130 (Create grafana workspace from template in the coder dashboard before use)\n  - Vscode: http://192.168.76.2:30190 (Create vscode workspace from template in the coder dashboard before use)\n  - Docker Registry: http://192.168.76.2:30150\n  - Minio API: http://192.168.76.2:30080 (Username: minio Password: minio123)\n  - Minio UI: http://192.168.76.2:30090 (Username: minio Password: minio123)\n  - KubeFlow: http://192.168.76.2:30100\n  - Coder: http://192.168.76.2:30170 (Username: test@digitalhub.test Password: Test12456@!)\n  - Core: http://192.168.76.2:30180\n  - Kubernetes Resource Manager: http://192.168.76.2:30160\n</code></pre></p>"},{"location":"upgrading/","title":"Upgrading DigitalHub","text":"<p>Once the platform is installed, you may find yourself in need of tweaking it and upgrading it.</p> <p>With the command <code>helm upgrade</code> you will be able to change the values of the platform with your custom ones like the example below:</p> <pre><code>helm upgrade -n &lt;NAMESPACE&gt; &lt;RELEASE&gt; digitalhub/digitalhub --timeout 30m0s --values &lt;YOUR_VALUES_FILE_PATH&gt;\n</code></pre> <p>Upgrading Coder templates</p> <p>If you wish to upgrade the Coder templates, you can do so.</p> <p>You can find them in <code>digitalhub/charts/digitalhub/confs/coder</code>.</p> <p>However, it is mandatory to create and set your Coder access token in the values file.</p> <pre><code>coder:\n  template:\n    upgrade:\n      # Set it to true if you want to upgrade the Coder templates.\n      enabled: false\n      # In order to upgrade the templates, you will need to create and set here a Coder Token.\n      token: \"\"\n</code></pre> <p>Upgrading from Digitalhub 0.7 to 0.8</p> <p>This section is aimed only for environments with an already running instance of Digitalhub. </p> <p>Due to the removal of MLRun, the upgrading process needs some extra steps.</p> <p>Follow this guide to upgrade your installation while keeping your existing environment stable:</p> <p>1) Clone the repository of Digitalhub. You will need to apply some CRDS manually.</p> <p>2) Apply the CRDS inside the folder <code>digitalhub/charts/kubeflow-pipelines/crds</code> in your namespace. Most of the CRDS are the same as the one applied with the MLRun chart, but some are not and are needed for the standalone installation of Kubeflow Pipelines.</p> <p>3) The MLRun chart included a MySql depolyment, but, although the Kubeflow Pipelines chart uses the same approach, the MySql version used (8.0.26) is greater then the one installed with MLRun, therefore it is necessary to remove the existing MySql deployment and the associated PVC.</p> <p>If your environment, instead of the embedded one, used an external deployment of MySql with a version compatible with 8.0.26, you can choose to keep it setting the values accordingly. Please, check the MySql configuration guide for KFP for more details.</p> <p>4) You can now upgrade to Digitalhub 0.8.0. After the installation, make sure that the crds inside <code>digitalhub/charts/kubeflow-pipelines/crds</code> have been all correctly applied.</p>"},{"location":"authentication/coder/","title":"Coder","text":"<p>To enable the authentication with a provider for Coder, please consult the official Coder documentation.</p> <p>In your provider, the redirect url should correspond to <code>https://yourcoderurl/api/v2/users/oidc/callback</code>.</p>"},{"location":"authentication/core/","title":"Core","text":"<p>To enable the authentication with a provider for Core, you will need to set the values in the file Values.yaml of the chart digitalhub in the Core section.</p> <p>The example below shows only the values concerning the authentication configuration.</p> <pre><code>core:\n  authentication:\n    openId:\n      enabled: true\n      issuerUri: \"https://yourproviderurl\" # Set the issuer url of your provider\n      jwtAudience: \"\" # Set the audience\n      jwtClaim: \"\" # Set the claims\n      oidcClientId: \"\" # Use this if you want to hardcode your clientID\n      scope: \"\" # Specify the scopes\n      externalSecret: # Use this if you want to get the clientID by secret.\n        name: \"\" # Name of the secret\n        key: \"\" # Key of the secret containing the clientID\n</code></pre> <p>In your provider, the redirect url should correspond to <code>https://yourcoreurl/console/auth-callback</code>.</p>"},{"location":"authentication/dashboard/","title":"Dashboard","text":"<p>To enable the authentication with a provider for the Dashboard, you will need to set the values in the file Values.yaml of the chart digitalhub in the Dashboard section.</p> <p>The example below shows only the values concerning the authentication configuration.</p> <pre><code>dashboard:\n  oidc:\n    enabled: true\n    audience:\n      clientId: \"\" # Use this if you want to hardcode your clientID\n      externalSecret: # Use this if you want to get the clientID by secret.\n        name: \"\" # Name of the secret\n        key: \"\" # Key of the secret containing the clientID\n    config:\n      issuer: \"https://yourproviderurl\" # Set the issuer url of your provider\n</code></pre>"},{"location":"authentication/krm/","title":"Kubernetes Resource Manager","text":"<p>To enable the authentication with a provider for Kubernetes Resource Manager, you will need to set the values in the file Values.yaml of the chart digitalhub in the Kubernetes Resource Manager section. </p> <p>The example below shows only the values concerning the authentication configuration.</p> <pre><code>kubernetes-resource-manager:\n  oidc:\n    enabled: true\n    audience:\n      clientId: \"\" # Use this if you want to hardcode your clientID\n      externalSecret: # Use this if you want to get the clientID by secret.\n        name: \"\" # Name of the secret\n        key: \"\" # Key of the secret containing the clientID\n    issuer: \"https://yourproviderurl\" # Set the issuer url of your provider\n    scope: \"\" # Set the scopes\n    authType: \"\" # Set the type of authentication\n</code></pre> <p>In your provider, the redirect url should correspond to <code>https://yourkubernetesresourcemanagerurl/console/auth-callback</code>.</p>"},{"location":"authentication/kubeflow/","title":"Kubeflow","text":"<p>To enable the authentication with a provider for Kubeflow, you will need to set the values in the file Values.yaml of the chart digitalhub in the OAuth2 Proxy section. </p> <p>The applications using OAuth2 Proxy are specified as a list and should be added together one after the other.</p> <p>The example below shows only the values concerning the authentication configuration.</p> <pre><code>oauth2-proxy:\n  enabled: true\n  apps:\n    - redirectUrl: \"https://yourkubeflowurl/oauth2/callback\" # Set the redirect url for the application\n      oidcIssuerUrl: \"https://yourproviderurl\" # Set the url of your provider\n      existingSecret:\n        name: \"\" # Name of the secret containing clientID and clientSecret\n        clientId: \"clientid\" # Key of the secret containing the clientID\n        secretKey: \"clientsecret\" # Key of the secret containing the client secret\n</code></pre>"},{"location":"authentication/minio/","title":"Minio","text":"<p>To enable the authentication with a provider for Minio, you will need to set the values in the file Values.yaml of the chart digitalhub in the Minio section. </p> <p>The example below shows only the values concerning the authentication configuration.</p> <pre><code>minio:\n  oidc:\n    enabled: true\n    configUrl: \"https://yourproviderurl/.well-known/openid-configuration\" # Set the url of your provider\n    existingClientSecretName: \"\" # Name of the secret containing clientID and clientSecret\n    existingClientIdKey: \"\" # Key of the secret containing the clientID\n    existingClientSecretKey: \"\" # Key of the secret containing the client secret\n    claimName: \"\"  # Set the name of the JWT Claim\n    scopes: \"\" # Set the scopes\n    redirectUri: \"https://yourminiourl/oauth_callback\" # Set the redirect for the application\n    displayName: \"\" # Set the name of your provider\n</code></pre> <p>Please, consult the official Minio documentation for more details about the options used above.</p> <p>In your provider, the redirect url should correspond to <code>https://yourminiourl/oauth_callback</code>.</p>"},{"location":"charts/core/keystore/","title":"Keystore","text":"<p>To set up a Keystore for Core, add the following section to your <code>values.yaml</code> file and configure the following fields:</p> <pre><code>core:\n  keystore:\n    existingSecret:\n      secretName: \"keystore-secret\" # Name of the secret containing the keystore\n      keyName: \"keystore.jwks\"    # Name of the key in your keystore secret, should correspond to the keystore file name\n    keystoreKid: \"\"  # Specify the key that the keystore should pick\n    keystorePath: \"/etc/keystore\" # Path where your keystore will be saved\n</code></pre> <p>In this example, a Keystore will be created in the path <code>/etc/keystore/keystore.jwks</code> from a secret called <code>keystore-secret</code>. The key of the secret, <code>keystore.jwks</code>, must contain the base64 encoded keystore.</p>"},{"location":"charts/core/templates/","title":"Core templates","text":"<p>You can create and use custom Core templates for your use cases.</p> <p>First, create a configmap with a valid json. You can choose from the following fields:</p> <ul> <li>TO BE ADDED</li> </ul> <p>The configmap should look like this:</p> <p><pre><code>apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: your-configmap\ndata:\n  yourtemplate.json: |\n    {\n        \"tolerations\": [\n            {\n                \"key\": \"nvidia.com/gpu\",\n                \"operator\": \"Equal\",\n                \"value\": \"a100\",\n                \"effect\": \"NoSchedule\"\n            }\n        ],\n        \"resources\": {\n            \"cpu\": {\n                \"limits\": \"24\",\n                \"requests\": \"24\"\n            },\n            \"memory\": {\n                \"limits\": \"200Gi\",\n                \"requests\": \"200Gi\"\n            },\n            \"gpu\": {\n                \"limits\": \"1\",\n                \"requests\": \"1\"\n            }\n        }\n    }\n</code></pre> Then, apply the configmap:</p> <p><pre><code>kubectl apply -n YOUR_NAMESPACE -f PATH_OF_YOUR_CONFIGMAP\n</code></pre> Next, mount the configmap in a volume for Core by editing your values file under the Core section.</p> <p>First, add the volume containing your configmap:</p> <pre><code>core:\n  volumes:\n    - name: yourvolume\n      configMap:\n        name: yourconfigmap\n</code></pre> <p>Then, mount the volume:</p> <pre><code>core:\n  volumes:\n    - name: yourvolume\n      configMap:\n        name: yourconfigmap  # Name of the configmap containing the template.json.\n  volumeMounts:\n    - name: yourvolume\n      # Path in which the template will be mounted.\n      # The name of the .json file must be the same as the one in the data section of your configmap.\n      mountPath: test/yourtemplate.json\n      subPath: yourtemplate.json\n</code></pre> <p>Finally, add the mounted template to the Core list of profiles:</p> <pre><code>core:\n  volumes:\n    - name: yourvolume\n      configMap:\n        name: yourconfigmap\n  volumeMounts:\n    - name: yourvolume\n      mountPath: test/yourtemplate.json\n      subPath: yourtemplate.json\n  profiles:\n    - name: your-template-name       # Name of your template\n      path: test/yourtemplate.json   # Mount path of your custom json file. Must be the same as the mountPath.\n</code></pre> <p>You can add multiple templates by following the same procedure and adding the new volume, volumeMounts and profiles to the lists.</p> <p>Be sure to create a configmap for every template.</p> <pre><code>core:\n  volumes:\n    - name: yourvolume\n      configMap:\n        name: yourconfigmap\n    - name: yourvolume2\n      configMap:\n        name: yourconfigmap2\n  volumeMounts:\n    - name: yourvolume\n      mountPath: test/yourtemplate.json\n      subPath: yourtemplate.json\n    - name: yourvolume2\n      mountPath: test/yourtemplate2.json\n      subPath: yourtemplate2.json\n  profiles:\n    - name: your-template-name\n      path: test/yourtemplate.json\n    - name: your-template2-name\n      path: test/yourtemplate2.json\n</code></pre>"},{"location":"charts/kfp/mysql/","title":"Database configuration","text":"<p>Kubeflow Pipelines uses a MySql database for data storage. This section describes how to set it up properly taking into account two use cases.</p>"},{"location":"charts/kfp/mysql/#use-case-1-creating-a-new-database","title":"Use case 1: creating a new database","text":"<p>By default, the Kubeflow Pipelines chart creates a new MySql database with a root user and an unprivileged user.</p> <p>To achieve this goal, set the values accordingly in the <code>kubeflow-pipelines</code> section of the <code>values.yaml</code> file:</p> <pre><code>kubeflow-pipelines:\n  # These values crate a new mysql deployment using rootUsername and rootPassword for the admin account.\n  embeddedMySql:\n    enabled: true       # Enable the creation of a new MySql database\n    rootUsername: root  # Username of the root user\n    rootPassword: pwd   # Password of the root user\n  db:\n    # Set the username and password for the unprivileged user of a new mysql database deployment.\n    username: mysqluser # Username of the unprivileged user\n    password: pwd       # Password of the unprivileged user\n</code></pre>"},{"location":"charts/kfp/mysql/#use-case-2-using-an-already-existing-database","title":"Use case 2: using an already existing database","text":""},{"location":"charts/kfp/mysql/#prerequisites","title":"Prerequisites:","text":"<ul> <li>An already existing MySql in your environment</li> <li>A secret containing two keys, one for the username and one for the password of the MySql user you wish to use</li> <li>Two databases named <code>mlpipeline</code> and <code>metadb</code></li> <li>The user that you wish to use MUST have permissions to work on the above mentioned databases</li> </ul> <p>In case you have an already existing MySql in the same environment that you wish to use, you can set the values like the following example:</p> <pre><code>kubeflow-pipelines:\n  embeddedMySql:\n    enabled: false      # Disable the creation of a new MySql database\n  db:\n    # If you have an already existing mysql database that you want to use, you must provide the secret containing username and password of the user.\n    # WARNING: if you want to use an existing mysql deployment, make sure to:\n    # - Have two databases, \"metadb\" and \"mlpipeline\"\n    # - In the secret, specify a user that has privileges on the two above mentioned databases\n    externalSecret:\n      secretName: \"mysql-user-secret\"   # Name of the secret cotaining username and password of the MySql user\n      usernameKey: \"username\"           # Name of the key cotaining the username the MySql user\n      passwordKey: \"password\"           # Name of the key cotaining the password of the MySql user\n</code></pre>"},{"location":"charts/krm/roles/","title":"KRM roles","text":"<p>Enabling authentication for the Kubernetes Resource Manager is required to use this feature.</p> <p>Setting up roles can be a great way for assigning permissions to the users of the Kubernetes Resource Manager, setting up limitations to what they can do and the resources they can have access to.</p> <p>To set up your custom KRM roles and permissions, follow this example and change the fields to your needs in your Values file:</p> <pre><code>kubernetes-resource-manager:\n  oidc:\n    roleClaim: \"krm_roles\"    # Name of the role used \n    access:\n      roles:\n        - role: ROLE_MY_ROLE  # Name of the role\n          # Resources associated to the role with permissions\n          resources: k8s_service, k8s_secret::read, mycrd/example.com::write\n</code></pre> <p>In this basic example we create a Role called ROLE_MY_ROLE that will have:</p> <ul> <li>Access to the services</li> <li>Access with read permissions to the secrets</li> <li>Access with write permissions to a custom CRD</li> </ul> <p>You will also have to setup your authentication provider accordingly, so that you can associate the correct role to the correct users.</p>"}]}